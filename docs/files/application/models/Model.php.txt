<?php

abstract class Model extends QueryBuilder {

  public function __construct ($db) {
    if (get_class($db) === 'Database') {
      parent::__construct($db);
    } else {
      throw new InvalidDatabaseException('Undefined', get_class($db));
    }
  }

  /*abstract public function insert($args);

  abstract public function update($args);

  abstract public function delete($args);*/

  abstract public function table_name ();

  protected function get_vars () {
    $model = get_called_class();
    $params = get_class_vars($model);
    $vars = array();
    $vars['tablename'] = $this->table_name();
    foreach ($params as $k => $e) {
      $ft = new ReflectionProperty($model, $k);
      $comments = $ft->getDocComment();
      $dfd = explode("\n", str_replace("\r", "", $comments));
      $properties = array();
      foreach ($dfd as $m) {
        $props = explode("@", $m);
        if (count($props) > 1) {
          $data = explode(" ", $props[1]);
          if (!isset($properties[$data[0]]) && isset($data[1])) {
            $properties[$data[0]] = $data[1];
          } elseif (!isset($properties[$data[0]])) {
            $properties["properties"][] = $data[0];
          }
        }
      }
      $vars ['fields'][] = $properties;
    }
    return $vars;
  }

  public function migrate () {
    $vars = $this->get_vars();
    $db = Connections::get($this->table_name());
    $db->import_model($vars);
  }

  public function get_array () {
    return $this->get_vars();
  }

}

