<?php

/**
 * @file Security.php
 * @author Damien Calesse
 * @date 23/07/2015
 * @description Security class for hashing and encrypt/decrypt password
 */

class Security {

  private static $_alphanum = "0123456789abcdef";

  /**
   * Hash function
   * @param algo (string) algorithm to use
   * @param data (string) data to hash
   * @return (string) hash of the data or null if algo does not exist
   */
  public static function hash ($algo, $data) {
    if (!in_array(strtolower($algo), hash_algos())) {
      return null;
    }

    return hash($algo, $data);
  }


  /**
   * Encrypt function
   * @param algo (string) algorithm to use
   * @param data (string) data to encrypt
   * @param mode (sting) mode to use for the encryption
   * @return (array) with encrypted data, key and iv size or null if the
   *         algo or mode does not exist
   */
  public static function encrypt ($algo, $data, $mode = "cbc") {
    if (!in_array(strtolower($algo), mcrypt_list_algorithms())) {
      return null;
    }

    if (!in_array(strtolower($mode), mcrypt_list_modes())) {
      return null;
    }

    $r = self::_encrypt($algo, $data, $mode);
    return $r;
  }

  /**
   * Decrypt function
   * @param ciphertext (string) data to decrypt
   * @param algo (string) algo to use
   * @param mode (string) mode used for the encryption
   * @param key (string) key used for the encryption
   * @param iv_size (integer) iv size
   * @return (string) decrypted text
   */
  public static function decrypt ($ciphertext, $algo, $mode, $key, $iv_size) {
    $_cipher = base64_decode($ciphertext);
    $iv_dec = substr($_cipher, 0, $iv_size);
    $ciphertext_dec = substr($_cipher, $iv_size);

    $r = mcrypt_decrypt($algo, $key, $ciphertext_dec, $mode, $iv_dec);
    return preg_replace('/[\x00-\x1F\x80-\xFF]/', '', $r);
  }
  /**
   * Check pwd
   *
   *
   */
  public static function check ($pwd, $encpwd, $setup) {
    $iv = substr(base64_decode($encpwd), 0, $setup[3]);
    var_dump($setup);
    var_dump($pwd);
    var_dump($encpwd);
    $r = self::_encrypt($setup[0], $pwd, $setup[1], $setup[2], $iv, $setup[3]);
    var_dump($r);
    return $r['ciphertext'] === $encpwd;
  }

  /**
   * Get supported algos function
   * @return (array) list of supported algos
   */
  public static function get_supported_algos () {
    return mcrypt_list_algorithms();
  }

  /**
   * Real encrypt function
   *
   *
   */
  private static function _encrypt ($algo, $data, $mode, $key = null, $iv = null, $iv_size = null) {

    if ($key !== null
        && $iv !== null
        && $iv_size !== null) {
          $ciphertext = base64_encode($iv . mcrypt_encrypt($algo, $key, $data, $mode, $iv));

          $r = array ("ciphertext" => $ciphertext, "key" => $key, "iv_size" => $iv_size);
          return $r;
    }

    $key = self::generate_random_key();
    $iv_size = mcrypt_get_iv_size($algo, $mode);
    $iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);

    $ciphertext = base64_encode($iv . mcrypt_encrypt($algo, $key, $data, $mode, $iv));

    $r = array ("ciphertext" => $ciphertext, "key" => $key, "iv_size" => $iv_size);
    return $r;
  }


  /**
   * Generate a random key
   * @param algo (integer) algo to use
   * @return (string) hexadecimal random key
   */
  private static function generate_random_key ($algo = 256) {
    switch ($algo) {
      case 128 :
          $k = pack('H*', self::generate_random_hexa(16));
        break;
      case 192 :
          $k = pack('H*', self::generate_random_hexa(24));
        break;
      case 256 :
          $k = pack('H*', self::generate_random_hexa(32));
        break;
      default :
          return null;
        break;
    }

    return $k;
  }

  /**
   * Get supported algos function
   * @param size (integer) algo to use
   * @return (array) list of supported algos
   */
  private static function generate_random_hexa ($size) {
    $str = '';
    $l = strlen(self::$_alphanum);
    for ($i = 0; $i < $size; $i++) {
      $str .= self::$_alphanum[rand(0, $l - 1)];
    }

    return $str;
  }

}

